// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tidb-slowquery-lynx/model"
)

func newAllCluster(db *gorm.DB, opts ...gen.DOOption) allCluster {
	_allCluster := allCluster{}

	_allCluster.allClusterDo.UseDB(db, opts...)
	_allCluster.allClusterDo.UseModel(&model.AllCluster{})

	tableName := _allCluster.allClusterDo.TableName()
	_allCluster.ALL = field.NewAsterisk(tableName)
	_allCluster.Cluster = field.NewString(tableName, "Cluster")
	_allCluster.DB = field.NewString(tableName, "DB")

	_allCluster.fillFieldMap()

	return _allCluster
}

type allCluster struct {
	allClusterDo

	ALL     field.Asterisk
	Cluster field.String
	DB      field.String

	fieldMap map[string]field.Expr
}

func (a allCluster) Table(newTableName string) *allCluster {
	a.allClusterDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allCluster) As(alias string) *allCluster {
	a.allClusterDo.DO = *(a.allClusterDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allCluster) updateTableName(table string) *allCluster {
	a.ALL = field.NewAsterisk(table)
	a.Cluster = field.NewString(table, "Cluster")
	a.DB = field.NewString(table, "DB")

	a.fillFieldMap()

	return a
}

func (a *allCluster) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allCluster) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["Cluster"] = a.Cluster
	a.fieldMap["DB"] = a.DB
}

func (a allCluster) clone(db *gorm.DB) allCluster {
	a.allClusterDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allCluster) replaceDB(db *gorm.DB) allCluster {
	a.allClusterDo.ReplaceDB(db)
	return a
}

type allClusterDo struct{ gen.DO }

type IAllClusterDo interface {
	gen.SubQuery
	Debug() IAllClusterDo
	WithContext(ctx context.Context) IAllClusterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllClusterDo
	WriteDB() IAllClusterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllClusterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllClusterDo
	Not(conds ...gen.Condition) IAllClusterDo
	Or(conds ...gen.Condition) IAllClusterDo
	Select(conds ...field.Expr) IAllClusterDo
	Where(conds ...gen.Condition) IAllClusterDo
	Order(conds ...field.Expr) IAllClusterDo
	Distinct(cols ...field.Expr) IAllClusterDo
	Omit(cols ...field.Expr) IAllClusterDo
	Join(table schema.Tabler, on ...field.Expr) IAllClusterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllClusterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllClusterDo
	Group(cols ...field.Expr) IAllClusterDo
	Having(conds ...gen.Condition) IAllClusterDo
	Limit(limit int) IAllClusterDo
	Offset(offset int) IAllClusterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllClusterDo
	Unscoped() IAllClusterDo
	Create(values ...*model.AllCluster) error
	CreateInBatches(values []*model.AllCluster, batchSize int) error
	Save(values ...*model.AllCluster) error
	First() (*model.AllCluster, error)
	Take() (*model.AllCluster, error)
	Last() (*model.AllCluster, error)
	Find() ([]*model.AllCluster, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllCluster, err error)
	FindInBatches(result *[]*model.AllCluster, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AllCluster) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllClusterDo
	Assign(attrs ...field.AssignExpr) IAllClusterDo
	Joins(fields ...field.RelationField) IAllClusterDo
	Preload(fields ...field.RelationField) IAllClusterDo
	FirstOrInit() (*model.AllCluster, error)
	FirstOrCreate() (*model.AllCluster, error)
	FindByPage(offset int, limit int) (result []*model.AllCluster, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllClusterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allClusterDo) Debug() IAllClusterDo {
	return a.withDO(a.DO.Debug())
}

func (a allClusterDo) WithContext(ctx context.Context) IAllClusterDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allClusterDo) ReadDB() IAllClusterDo {
	return a.Clauses(dbresolver.Read)
}

func (a allClusterDo) WriteDB() IAllClusterDo {
	return a.Clauses(dbresolver.Write)
}

func (a allClusterDo) Session(config *gorm.Session) IAllClusterDo {
	return a.withDO(a.DO.Session(config))
}

func (a allClusterDo) Clauses(conds ...clause.Expression) IAllClusterDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allClusterDo) Returning(value interface{}, columns ...string) IAllClusterDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allClusterDo) Not(conds ...gen.Condition) IAllClusterDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allClusterDo) Or(conds ...gen.Condition) IAllClusterDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allClusterDo) Select(conds ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allClusterDo) Where(conds ...gen.Condition) IAllClusterDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allClusterDo) Order(conds ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allClusterDo) Distinct(cols ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allClusterDo) Omit(cols ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allClusterDo) Join(table schema.Tabler, on ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allClusterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allClusterDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allClusterDo) Group(cols ...field.Expr) IAllClusterDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allClusterDo) Having(conds ...gen.Condition) IAllClusterDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allClusterDo) Limit(limit int) IAllClusterDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allClusterDo) Offset(offset int) IAllClusterDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allClusterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllClusterDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allClusterDo) Unscoped() IAllClusterDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allClusterDo) Create(values ...*model.AllCluster) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allClusterDo) CreateInBatches(values []*model.AllCluster, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allClusterDo) Save(values ...*model.AllCluster) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allClusterDo) First() (*model.AllCluster, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllCluster), nil
	}
}

func (a allClusterDo) Take() (*model.AllCluster, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllCluster), nil
	}
}

func (a allClusterDo) Last() (*model.AllCluster, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllCluster), nil
	}
}

func (a allClusterDo) Find() ([]*model.AllCluster, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllCluster), err
}

func (a allClusterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllCluster, err error) {
	buf := make([]*model.AllCluster, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allClusterDo) FindInBatches(result *[]*model.AllCluster, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allClusterDo) Attrs(attrs ...field.AssignExpr) IAllClusterDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allClusterDo) Assign(attrs ...field.AssignExpr) IAllClusterDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allClusterDo) Joins(fields ...field.RelationField) IAllClusterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allClusterDo) Preload(fields ...field.RelationField) IAllClusterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allClusterDo) FirstOrInit() (*model.AllCluster, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllCluster), nil
	}
}

func (a allClusterDo) FirstOrCreate() (*model.AllCluster, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllCluster), nil
	}
}

func (a allClusterDo) FindByPage(offset int, limit int) (result []*model.AllCluster, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allClusterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allClusterDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allClusterDo) Delete(models ...*model.AllCluster) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allClusterDo) withDO(do gen.Dao) *allClusterDo {
	a.DO = *do.(*gen.DO)
	return a
}
