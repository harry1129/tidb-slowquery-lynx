// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tidb-slowquery-lynx/model"
)

func newAllClusterSlowQueryInfo(db *gorm.DB, opts ...gen.DOOption) allClusterSlowQueryInfo {
	_allClusterSlowQueryInfo := allClusterSlowQueryInfo{}

	_allClusterSlowQueryInfo.allClusterSlowQueryInfoDo.UseDB(db, opts...)
	_allClusterSlowQueryInfo.allClusterSlowQueryInfoDo.UseModel(&model.AllClusterSlowQueryInfo{})

	tableName := _allClusterSlowQueryInfo.allClusterSlowQueryInfoDo.TableName()
	_allClusterSlowQueryInfo.ALL = field.NewAsterisk(tableName)
	_allClusterSlowQueryInfo.Cluster = field.NewString(tableName, "Cluster")
	_allClusterSlowQueryInfo.Digest = field.NewString(tableName, "Digest")
	_allClusterSlowQueryInfo.Plan = field.NewString(tableName, "Plan")
	_allClusterSlowQueryInfo.PlanDigest = field.NewString(tableName, "Plan_digest")
	_allClusterSlowQueryInfo.BinaryPlan = field.NewString(tableName, "Binary_plan")
	_allClusterSlowQueryInfo.Query = field.NewString(tableName, "Query")

	_allClusterSlowQueryInfo.fillFieldMap()

	return _allClusterSlowQueryInfo
}

type allClusterSlowQueryInfo struct {
	allClusterSlowQueryInfoDo

	ALL        field.Asterisk
	Cluster    field.String
	Digest     field.String
	Plan       field.String
	PlanDigest field.String
	BinaryPlan field.String
	Query      field.String

	fieldMap map[string]field.Expr
}

func (a allClusterSlowQueryInfo) Table(newTableName string) *allClusterSlowQueryInfo {
	a.allClusterSlowQueryInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allClusterSlowQueryInfo) As(alias string) *allClusterSlowQueryInfo {
	a.allClusterSlowQueryInfoDo.DO = *(a.allClusterSlowQueryInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allClusterSlowQueryInfo) updateTableName(table string) *allClusterSlowQueryInfo {
	a.ALL = field.NewAsterisk(table)
	a.Cluster = field.NewString(table, "Cluster")
	a.Digest = field.NewString(table, "Digest")
	a.Plan = field.NewString(table, "Plan")
	a.PlanDigest = field.NewString(table, "Plan_digest")
	a.BinaryPlan = field.NewString(table, "Binary_plan")
	a.Query = field.NewString(table, "Query")

	a.fillFieldMap()

	return a
}

func (a *allClusterSlowQueryInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allClusterSlowQueryInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["Cluster"] = a.Cluster
	a.fieldMap["Digest"] = a.Digest
	a.fieldMap["Plan"] = a.Plan
	a.fieldMap["Plan_digest"] = a.PlanDigest
	a.fieldMap["Binary_plan"] = a.BinaryPlan
	a.fieldMap["Query"] = a.Query
}

func (a allClusterSlowQueryInfo) clone(db *gorm.DB) allClusterSlowQueryInfo {
	a.allClusterSlowQueryInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allClusterSlowQueryInfo) replaceDB(db *gorm.DB) allClusterSlowQueryInfo {
	a.allClusterSlowQueryInfoDo.ReplaceDB(db)
	return a
}

type allClusterSlowQueryInfoDo struct{ gen.DO }

type IAllClusterSlowQueryInfoDo interface {
	gen.SubQuery
	Debug() IAllClusterSlowQueryInfoDo
	WithContext(ctx context.Context) IAllClusterSlowQueryInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllClusterSlowQueryInfoDo
	WriteDB() IAllClusterSlowQueryInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllClusterSlowQueryInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllClusterSlowQueryInfoDo
	Not(conds ...gen.Condition) IAllClusterSlowQueryInfoDo
	Or(conds ...gen.Condition) IAllClusterSlowQueryInfoDo
	Select(conds ...field.Expr) IAllClusterSlowQueryInfoDo
	Where(conds ...gen.Condition) IAllClusterSlowQueryInfoDo
	Order(conds ...field.Expr) IAllClusterSlowQueryInfoDo
	Distinct(cols ...field.Expr) IAllClusterSlowQueryInfoDo
	Omit(cols ...field.Expr) IAllClusterSlowQueryInfoDo
	Join(table schema.Tabler, on ...field.Expr) IAllClusterSlowQueryInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllClusterSlowQueryInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllClusterSlowQueryInfoDo
	Group(cols ...field.Expr) IAllClusterSlowQueryInfoDo
	Having(conds ...gen.Condition) IAllClusterSlowQueryInfoDo
	Limit(limit int) IAllClusterSlowQueryInfoDo
	Offset(offset int) IAllClusterSlowQueryInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllClusterSlowQueryInfoDo
	Unscoped() IAllClusterSlowQueryInfoDo
	Create(values ...*model.AllClusterSlowQueryInfo) error
	CreateInBatches(values []*model.AllClusterSlowQueryInfo, batchSize int) error
	Save(values ...*model.AllClusterSlowQueryInfo) error
	First() (*model.AllClusterSlowQueryInfo, error)
	Take() (*model.AllClusterSlowQueryInfo, error)
	Last() (*model.AllClusterSlowQueryInfo, error)
	Find() ([]*model.AllClusterSlowQueryInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllClusterSlowQueryInfo, err error)
	FindInBatches(result *[]*model.AllClusterSlowQueryInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AllClusterSlowQueryInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllClusterSlowQueryInfoDo
	Assign(attrs ...field.AssignExpr) IAllClusterSlowQueryInfoDo
	Joins(fields ...field.RelationField) IAllClusterSlowQueryInfoDo
	Preload(fields ...field.RelationField) IAllClusterSlowQueryInfoDo
	FirstOrInit() (*model.AllClusterSlowQueryInfo, error)
	FirstOrCreate() (*model.AllClusterSlowQueryInfo, error)
	FindByPage(offset int, limit int) (result []*model.AllClusterSlowQueryInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllClusterSlowQueryInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allClusterSlowQueryInfoDo) Debug() IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a allClusterSlowQueryInfoDo) WithContext(ctx context.Context) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allClusterSlowQueryInfoDo) ReadDB() IAllClusterSlowQueryInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a allClusterSlowQueryInfoDo) WriteDB() IAllClusterSlowQueryInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a allClusterSlowQueryInfoDo) Session(config *gorm.Session) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a allClusterSlowQueryInfoDo) Clauses(conds ...clause.Expression) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allClusterSlowQueryInfoDo) Returning(value interface{}, columns ...string) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allClusterSlowQueryInfoDo) Not(conds ...gen.Condition) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allClusterSlowQueryInfoDo) Or(conds ...gen.Condition) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allClusterSlowQueryInfoDo) Select(conds ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allClusterSlowQueryInfoDo) Where(conds ...gen.Condition) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allClusterSlowQueryInfoDo) Order(conds ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allClusterSlowQueryInfoDo) Distinct(cols ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allClusterSlowQueryInfoDo) Omit(cols ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allClusterSlowQueryInfoDo) Join(table schema.Tabler, on ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allClusterSlowQueryInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allClusterSlowQueryInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allClusterSlowQueryInfoDo) Group(cols ...field.Expr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allClusterSlowQueryInfoDo) Having(conds ...gen.Condition) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allClusterSlowQueryInfoDo) Limit(limit int) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allClusterSlowQueryInfoDo) Offset(offset int) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allClusterSlowQueryInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allClusterSlowQueryInfoDo) Unscoped() IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allClusterSlowQueryInfoDo) Create(values ...*model.AllClusterSlowQueryInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allClusterSlowQueryInfoDo) CreateInBatches(values []*model.AllClusterSlowQueryInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allClusterSlowQueryInfoDo) Save(values ...*model.AllClusterSlowQueryInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allClusterSlowQueryInfoDo) First() (*model.AllClusterSlowQueryInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllClusterSlowQueryInfo), nil
	}
}

func (a allClusterSlowQueryInfoDo) Take() (*model.AllClusterSlowQueryInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllClusterSlowQueryInfo), nil
	}
}

func (a allClusterSlowQueryInfoDo) Last() (*model.AllClusterSlowQueryInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllClusterSlowQueryInfo), nil
	}
}

func (a allClusterSlowQueryInfoDo) Find() ([]*model.AllClusterSlowQueryInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllClusterSlowQueryInfo), err
}

func (a allClusterSlowQueryInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllClusterSlowQueryInfo, err error) {
	buf := make([]*model.AllClusterSlowQueryInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allClusterSlowQueryInfoDo) FindInBatches(result *[]*model.AllClusterSlowQueryInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allClusterSlowQueryInfoDo) Attrs(attrs ...field.AssignExpr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allClusterSlowQueryInfoDo) Assign(attrs ...field.AssignExpr) IAllClusterSlowQueryInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allClusterSlowQueryInfoDo) Joins(fields ...field.RelationField) IAllClusterSlowQueryInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allClusterSlowQueryInfoDo) Preload(fields ...field.RelationField) IAllClusterSlowQueryInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allClusterSlowQueryInfoDo) FirstOrInit() (*model.AllClusterSlowQueryInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllClusterSlowQueryInfo), nil
	}
}

func (a allClusterSlowQueryInfoDo) FirstOrCreate() (*model.AllClusterSlowQueryInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllClusterSlowQueryInfo), nil
	}
}

func (a allClusterSlowQueryInfoDo) FindByPage(offset int, limit int) (result []*model.AllClusterSlowQueryInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allClusterSlowQueryInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allClusterSlowQueryInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allClusterSlowQueryInfoDo) Delete(models ...*model.AllClusterSlowQueryInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allClusterSlowQueryInfoDo) withDO(do gen.Dao) *allClusterSlowQueryInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
